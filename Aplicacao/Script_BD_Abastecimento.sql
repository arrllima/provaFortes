/******************************************************************************/
/***          Generated by IBExpert 2010.03.19 14/09/2019 11:49:12          ***/
/***          Versao Firebird: 2.5.3                                        ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES NONE;

CREATE DATABASE 'C:\Andre\ProvaDelphiFortes\Aplicacao\ABASTECIMENTO.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET NONE;

/******************************************************************************/
/***                         User Defined Functions                         ***/
/******************************************************************************/

DECLARE EXTERNAL FUNCTION ADDMONTH
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addMonth' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION "ROUND"
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION UDF_ABS
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'udf_Abs' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_CEIL
    DOUBLE PRECISION
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'udf_Ceil' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_COPY
    CSTRING(254),
    INTEGER,
    INTEGER
    RETURNS CSTRING(254)
    ENTRY_POINT 'udf_Copy' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_DAYSPAN
    TIMESTAMP,
    TIMESTAMP
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'udf_DaySpan' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_ENCDATE
    TIMESTAMP,
    SMALLINT,
    SMALLINT,
    SMALLINT
    RETURNS PARAMETER 1
    ENTRY_POINT 'udf_EncDate' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_LEFT
    CSTRING(254),
    INTEGER
    RETURNS CSTRING(254)
    ENTRY_POINT 'udf_Left' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_LEN
    CSTRING(254)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'udf_Len' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_MIN
    DOUBLE PRECISION,
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'udf_Min' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_MONTHNAME
    CSTRING(15),
    TIMESTAMP
    RETURNS PARAMETER 1
    ENTRY_POINT 'udf_MonthName' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_MONTHSPAN
    TIMESTAMP,
    TIMESTAMP
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'udf_MonthSpan' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_NVL
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'udf_NVL' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_REPLACE
    CSTRING(254),
    CSTRING(254),
    CSTRING(254)
    RETURNS CSTRING(254)
    ENTRY_POINT 'udf_Replace' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_ROUND
    DOUBLE PRECISION
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'udf_Round' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_SIGN
    DOUBLE PRECISION
    RETURNS SMALLINT BY VALUE
    ENTRY_POINT 'udf_Sign' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_STRIP
    CSTRING(254),
    CSTRING(254)
    RETURNS CSTRING(254)
    ENTRY_POINT 'udf_Strip' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_STRZERO
    CSTRING(20),
    INTEGER,
    INTEGER
    RETURNS PARAMETER 1
    ENTRY_POINT 'udf_StrZero' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_TRUNC
    DOUBLE PRECISION
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'udf_Trunc' MODULE_NAME 'tbudf';


DECLARE EXTERNAL FUNCTION UDF_TRUNCDEC
    DOUBLE PRECISION,
    SMALLINT
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'udf_TruncDec' MODULE_NAME 'tbudf';


/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/

CREATE TABLE ABASTECIMENTO (
    CODIGO      INTEGER NOT NULL,
    DATA_ABAST  TIMESTAMP NOT NULL,
    BOMBA_ID    INTEGER NOT NULL,
    QTD_LITROS  NUMERIC(5,2) NOT NULL,
    VLR_IMP     NUMERIC(9,2) NOT NULL,
    VLR_ABAST   NUMERIC(9,2) NOT NULL
);

CREATE TABLE BOMBA (
    CODIGO     INTEGER NOT NULL,
    TANQUE_ID  INTEGER,
    DESCRICAO  VARCHAR(30),
    MODELO     VARCHAR(30)
);

CREATE TABLE TANQUE (
    CODIGO       INTEGER NOT NULL,
    DESCRICAO    VARCHAR(30),
    COMBUSTIVEL  VARCHAR(20)
);


/******************************************************************************/
/***                                Generators                              ***/
/******************************************************************************/

CREATE SEQUENCE GEN_ABASTECIMENTO;
CREATE SEQUENCE GEN_TANQUE;
CREATE SEQUENCE GEN_BOMBA;

/******************************************************************************/
/***                                TRIGGERS                                ***/
/******************************************************************************/

CREATE trigger abastecimento_bi for abastecimento
active before insert position 0
AS
begin
  NEW.CODIGO = GEN_ID(GEN_ABASTECIMENTO,1);
end;

CREATE trigger tanque_bi for tanque
active before insert position 0
AS
begin
  NEW.CODIGO = GEN_ID(GEN_TANQUE,1);
end;


CREATE trigger bomba_bi for bomba
active before insert position 0
AS
begin
  NEW.CODIGO = GEN_ID(GEN_BOMBA,1);
end;



/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE ABASTECIMENTO ADD CONSTRAINT PK_ABASTECIMENTO PRIMARY KEY (CODIGO);
ALTER TABLE BOMBA ADD CONSTRAINT PK_BOMBA PRIMARY KEY (CODIGO);
ALTER TABLE TANQUE ADD CONSTRAINT PK_TANQUE PRIMARY KEY (CODIGO);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE ABASTECIMENTO ADD FOREIGN KEY (BOMBA_ID) REFERENCES BOMBA (CODIGO);
ALTER TABLE BOMBA ADD FOREIGN KEY (TANQUE_ID) REFERENCES TANQUE (CODIGO);